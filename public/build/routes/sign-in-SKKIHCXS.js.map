{
  "version": 3,
  "sources": ["browser-route-module:routes/sign-in.tsx?browser", "../../../app/routes/sign-in.tsx"],
  "sourcesContent": ["export { default } from \"./routes/sign-in.tsx\";", "import type { LoaderArgs } from \"@remix-run/node\";\nimport { redirect, type ActionArgs, json } from \"@remix-run/node\";\nimport { Form, Link } from \"@remix-run/react\";\nimport { signInUserController } from \"src/infra/http/controllers/sign-in-user-controller\";\nimport { validateSessionId } from \"src/infra/http/helpers/validate-session-id\";\nimport { getSession, commitSession } from \"~/sessions\";\n\nexport async function action({ request }: ActionArgs) {\n    const form = await request.formData();\n    const email = form.get(\"email\");\n    const password = form.get(\"password\");\n\n    const session = await getSession(request.headers.get(\"Cookie\"));\n\n    if (typeof password !== \"string\" || typeof email !== \"string\") {\n        return new Response(JSON.stringify({ error: \"credentials is invalid\" }), {\n            status: 400,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        });\n    }\n\n    const { error, sessionId } = await signInUserController({ email, password });\n\n    if (error || !sessionId) {\n        console.log(error);\n        return new Response(null, {\n            status: 400,\n            statusText: error,\n        });\n    }\n\n    session.set(\"token\", sessionId);\n\n    return redirect(\"/home\", {\n        headers: {\n            \"Set-Cookie\": await commitSession(session),\n        },\n    });\n}\n\nexport async function loader({ request }: LoaderArgs) {\n    const session = await getSession(request.headers.get(\"Cookie\"));\n\n    const token = session.get(\"token\");\n\n    if (!token) {\n        // Redirect to the home page if they are already signed in.\n        return json({});\n    }\n\n    const { user } = await validateSessionId({ sessionId: token });\n\n    if (user) {\n        return redirect(\"/home\");\n    }\n\n    return json({});\n}\n\nexport default function () {\n    return (\n        <Form method=\"POST\">\n            <label>\n                email\n                <input type=\"text\" name=\"email\" />\n            </label>\n            <label>\n                password\n                <input type=\"password\" name=\"password\" />\n            </label>\n            <button type=\"submit\">Logar</button>\n            <Link to=\"/sign-up\">cadastre-se</Link>\n        </Form>\n    );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAkEgB;AALD,SAAR,kBAAoB;AACvB,SACI,mDAAC,QAAK,QAAO,QACT;AAAA,uDAAC,WAAM;AAAA;AAAA,MAEH,mDAAC,WAAM,MAAK,QAAO,MAAK,WAAxB;AAAA;AAAA;AAAA;AAAA,aAAgC;AAAA,SAFpC;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAC,WAAM;AAAA;AAAA,MAEH,mDAAC,WAAM,MAAK,YAAW,MAAK,cAA5B;AAAA;AAAA;AAAA;AAAA,aAAuC;AAAA,SAF3C;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAC,YAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,WAA2B;AAAA,IAC3B,mDAAC,QAAK,IAAG,YAAW,2BAApB;AAAA;AAAA;AAAA;AAAA,WAA+B;AAAA,OAVnC;AAAA;AAAA;AAAA;AAAA,SAWA;AAER;",
  "names": []
}
