{
  "version": 3,
  "sources": ["../../../app/routes/sign-up.tsx"],
  "sourcesContent": ["import { redirect } from \"@vercel/remix\";\nimport type { ActionArgs } from \"@vercel/remix\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport { createUserController } from \"src/infra/http/controllers/create-user-controller\";\n\nexport async function action({ request }: ActionArgs) {\n  const form = await request.formData();\n\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const email = form.get(\"email\");\n\n  if (\n    typeof username !== \"string\" ||\n    typeof password !== \"string\" ||\n    typeof email !== \"string\"\n  ) {\n    return new Response(JSON.stringify({ error: \"credentials is invalid\" }), {\n      status: 400,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  }\n\n  const { error } = await createUserController({ email, password, username });\n\n  if (error) {\n    return new Response(null, {\n      status: 400,\n      statusText: error,\n    });\n  }\n\n  return redirect(\"/sign-in\", 201);\n}\n\nexport default function () {\n  const data = useActionData<typeof action>();\n\n  return (\n    <div>\n      <h1>Sign up</h1>\n      {data ? <p style={{ color: \"red\" }}>{data.error}</p> : null}\n      <Form method=\"POST\">\n        <label>\n          username\n          <input type=\"text\" name=\"username\" />\n        </label>\n        <label>\n          email\n          <input type=\"text\" name=\"email\" />\n        </label>\n        <label>\n          password\n          <input type=\"password\" name=\"password\" />\n        </label>\n        <button type=\"submit\">Logar</button>\n        <Link to=\"/sign-in\">logar</Link>\n      </Form>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA,mBAAyB;AA0CnB;AALS,SAAR,kBAAoB;AACzB,QAAM,OAAO,cAA6B;AAE1C,SACE,mDAAC,SACC;AAAA,uDAAC,QAAG,uBAAJ;AAAA;AAAA;AAAA;AAAA,WAAW;AAAA,IACV,OAAO,mDAAC,OAAE,OAAO,EAAE,OAAO,MAAM,GAAI,eAAK,SAAlC;AAAA;AAAA;AAAA;AAAA,WAAwC,IAAO;AAAA,IACvD,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,WAAM;AAAA;AAAA,QAEL,mDAAC,WAAM,MAAK,QAAO,MAAK,cAAxB;AAAA;AAAA;AAAA;AAAA,eAAmC;AAAA,WAFrC;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,WAAM;AAAA;AAAA,QAEL,mDAAC,WAAM,MAAK,QAAO,MAAK,WAAxB;AAAA;AAAA;AAAA;AAAA,eAAgC;AAAA,WAFlC;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,WAAM;AAAA;AAAA,QAEL,mDAAC,WAAM,MAAK,YAAW,MAAK,cAA5B;AAAA;AAAA;AAAA;AAAA,eAAuC;AAAA,WAFzC;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,YAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,MAC3B,mDAAC,QAAK,IAAG,YAAW,qBAApB;AAAA;AAAA;AAAA;AAAA,aAAyB;AAAA,SAd3B;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,OAlBF;AAAA;AAAA;AAAA;AAAA,SAmBA;AAEJ;",
  "names": []
}
